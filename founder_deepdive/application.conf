#to change from spouse

deepdive {

  db.default {
    driver   : "org.postgresql.Driver"
    url      : "jdbc:postgresql://"${PGHOST}":"${PGPORT}"/"${DBNAME}
    user     : ${PGUSER}
    password : ${PGPASSWORD}
    dbname   : ${DBNAME}
    host     : ${PGHOST}
    port     : ${PGPORT}
  }

  # Put your variables here
  schema.variables {

    is_founder.is_true: Boolean

  }

  # Put your extractors here
  extraction.extractors {
  # Extractor 1: Clean output tables of all extractors
    ext_clear_table {
      style: "sql_extractor"
      sql: """
        DELETE FROM people_mentions;
        DELETE FROM company_mentions;
        DELETE FROM is_founder;
        DELETE FROM is_founder_features;
        """
    }

    # Extractor 2: extract people mentions:
    ext_people {
      # The style of the extractor
      style: "tsv_extractor"
      # An input to the extractor is a row (tuple) of the following query:
      input: """
        SELECT  sentence_id,
                array_to_string(words, '~^~'),
                array_to_string(ner_tags, '~^~')
          FROM  sentences"""

      # output of extractor will be written to this table:
      output_relation: "people_mentions"

      # This user-defined function will be performed on each row (tuple) of input query:
      udf: ${APP_HOME}"/udf/ext_people.py"

      dependencies: ["ext_clear_table"]
    }

    # Extractor 2bis: extract companies mentions:
    ext_company {
      # The style of the extractor
      style: "tsv_extractor"
      # An input to the extractor is a row (tuple) of the following query:
      input: """
        SELECT  sentence_id,
                array_to_string(words, '~^~'),
                array_to_string(ner_tags, '~^~')
          FROM  sentences"""

      # output of extractor will be written to this table:
      output_relation: "company_mentions"

      # This user-defined function will be performed on each row (tuple) of input query:
      udf: ${APP_HOME}"/udf/ext_company.py"

      dependencies: ["ext_clear_table"]
    }

  }

  # Put your inference rules here
  inference.factors {

  }

  # Specify a holdout fraction
  calibration.holdout_fraction: 0.00

}
